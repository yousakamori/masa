import { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { useUser } from "../context/userContext";
import firebase from "firebase";
import admin from "../firebase/node";
import { Post } from "../types";
import { formatDistanceToNow } from "date-fns";
import { ja } from "date-fns/locale";
import { useForm } from "react-hook-form";

type Props = {
  posts: Post[];
};

type Body = {
  body: string;
};

const Page: NextPage<Props> = ({ posts: initPosts }) => {
  const { user, loadingUser } = useUser();
  const [posts, setPosts] = useState<Post[]>(initPosts);

  const {
    register,
    handleSubmit,
    reset,
    formState: { errors, isDirty, isValid },
  } = useForm<Body>({ mode: "onChange" });

  const disabled = !isDirty || !isValid;

  const login = async () => {
    try {
      const user = await firebase.auth().signInAnonymously();
      console.log(user);
    } catch (err) {
      alert(err.message);
    }
  };

  // const logout = async () => {
  //   if (!confirm("sessionが削除されますがログアウトしますか?")) {
  //     return;
  //   }
  //   try {
  //     await firebase.auth().signOut();
  //   } catch (err) {
  //     alert(err.message);
  //   }
  // };

  const deletePost = async (id: string) => {
    if (!confirm("本当に削除しますか?")) {
      return;
    }

    try {
      await firebase.firestore().collection("posts").doc(id).delete();
      setPosts((prev) => prev.filter((post) => post.id !== id));
    } catch (err) {
      err;
    }
  };

  const createPost = async ({ body }: Body) => {
    if (!user) {
      alert("ログインしてね");
      return;
    }

    try {
      const newPost = {
        id: firebase.firestore().collection("_").doc().id,
        userId: user.uid,
        body,
        createdAt: firebase.firestore.Timestamp.now(),
      };

      await firebase.firestore().doc(`posts/${newPost.id}`).set(newPost);

      setPosts([
        ...posts,
        {
          ...newPost,
          createdAt: newPost.createdAt.toDate().toISOString(),
        },
      ]);

      reset();
    } catch (err) {
      alert(err.message);
    }
  };

  if (loadingUser) {
    <p>loading</p>;
  }

  return (
    <div>
      <Head>
        <title>人生＼(^o^)／ｵﾜﾀ</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1>Home</h1>
      {!user && <button onClick={login}>login</button>}

      {user && <p>あなたのIDは{user.uid}です</p>}

      <h2>投稿一覧</h2>
      {posts?.map((post) => (
        <ul key={post.id}>
          <li>{post.userId}</li>
          <li>{post.body}</li>
          <li>
            <time>
              {formatDistanceToNow(new Date(post.createdAt), {
                addSuffix: true,
                locale: ja,
              })}
            </time>
          </li>
          {post.userId === user?.uid && (
            <li>
              <button onClick={() => deletePost(post.id)}>削除</button>
            </li>
          )}
        </ul>
      ))}
      {user && (
        <form onSubmit={handleSubmit(createPost)}>
          <textarea
            {...register("body", {
              required: true,
              maxLength: {
                value: 140,
                message: "140文字以下で入力してください",
              },
            })}
            // type="text"
            placeholder="メッセージを入力してください"
          />
          <p>{errors.body?.message}</p>
          <button type="submit" disabled={disabled}>
            投稿
          </button>
        </form>
      )}
    </div>
  );
};

export const getStaticProps: GetStaticProps<Props> = async () => {
  const posts = (
    await admin
      .firestore()
      .collection("posts")
      .orderBy("createdAt", "asc")
      .get()
  ).docs.map((doc) => ({
    ...doc.data(),
    createdAt: doc.data().createdAt.toDate().toISOString(),
  })) as Post[];

  console.log(posts);

  return { props: { posts }, revalidate: 60 };
};

export default Page;
